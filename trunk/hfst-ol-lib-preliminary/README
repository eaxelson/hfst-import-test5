Preliminary hfst-optimized-lookup library

Usage:

	#include hfst-ol-handle.h

and compile your project with

	hfst-ol-handle.cc hfst-ol-lib.cc

The library lives in a namespace called hfst_ol. Pass a FILE pointer to the
TransducerHandle constructor, eg.:

	FILE * f = fopen(filename, "r");
	try
	{
		hfst_ol::TransducerHandle handle(f);
	}
	catch (hfst_ol::BadFileHandleException& e)
		{ /* problem with FILE pointer */ }
	catch (hfst_ol::AlphabetParsingException& e)
		{ /* problem with transducer file */ }

hfst_ol::TransducerHandle::set_input(char *) tokenizes an input string,
returning false when tokenization fails.
hfst_ol::TransducerHandle::returnAnalyses() returns a vector of
<std::string, float> pairs representing analyses.

	if (!handle.set_input(string_to_analyze)
		{ /* no tokenization */ }
	hfst_ol::OutputVector output = t.returnAnalyses();
	std::cout << "one analysis for " << string_to_analyze << " was " <<
	output[0].first << " with weight " << output[0].second << std::endl;

There are some functions for inspecting the transducer:

	bool isWeighted(void);
	bool hasFlagDiacritics(void);
	bool isDeterministic(void);
	bool isInputDeterministic(void);
	bool isMinimized(void);
	bool isCyclic(void);
	bool hasEpsilonEpsilonTransitions(void);
	bool hasInputEpsilonTransitions(void);
	bool hasInputEpsilonCycles(void);
	unsigned short symbolCount(void);
	unsigned short inputSymbolCount(void);
	unsigned int stateCount(void);
	unsigned int transitionCount(void);
