#line 2 "lexc-lexer.cc"

#line 4 "lexc-lexer.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer hlexc_create_buffer
#define yy_delete_buffer hlexc_delete_buffer
#define yy_flex_debug hlexc_flex_debug
#define yy_init_buffer hlexc_init_buffer
#define yy_flush_buffer hlexc_flush_buffer
#define yy_load_buffer_state hlexc_load_buffer_state
#define yy_switch_to_buffer hlexc_switch_to_buffer
#define yyin hlexcin
#define yyleng hlexcleng
#define yylex hlexclex
#define yylineno hlexclineno
#define yyout hlexcout
#define yyrestart hlexcrestart
#define yytext hlexctext
#define yywrap hlexcwrap
#define yyalloc hlexcalloc
#define yyrealloc hlexcrealloc
#define yyfree hlexcfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE hlexcrestart(hlexcin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int hlexcleng;

extern FILE *hlexcin, *hlexcout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE hlexclex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-hlexclineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < hlexcleng; ++yyl )\
                    if ( hlexctext[yyl] == '\n' )\
                        --hlexclineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up hlexctext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up hlexctext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via hlexcrestart()), so that the user can continue scanning by
	 * just pointing hlexcin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when hlexctext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int hlexcleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow hlexcwrap()'s to do buffer switches
 * instead of setting up a fresh hlexcin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void hlexcrestart (FILE *input_file  );
void hlexc_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE hlexc_create_buffer (FILE *file,int size  );
void hlexc_delete_buffer (YY_BUFFER_STATE b  );
void hlexc_flush_buffer (YY_BUFFER_STATE b  );
void hlexcpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void hlexcpop_buffer_state (void );

static void hlexcensure_buffer_stack (void );
static void hlexc_load_buffer_state (void );
static void hlexc_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER hlexc_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE hlexc_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE hlexc_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE hlexc_scan_bytes (yyconst char *bytes,int len  );

void *hlexcalloc (yy_size_t  );
void *hlexcrealloc (void *,yy_size_t  );
void hlexcfree (void *  );

#define yy_new_buffer hlexc_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        hlexcensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            hlexc_create_buffer(hlexcin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        hlexcensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            hlexc_create_buffer(hlexcin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define hlexcwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *hlexcin = (FILE *) 0, *hlexcout = (FILE *) 0;

typedef int yy_state_type;

extern int hlexclineno;

int hlexclineno = 1;

extern char *hlexctext;
#define yytext_ptr hlexctext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up hlexctext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	hlexcleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 37
#define YY_END_OF_BUFFER 38
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[537] =
    {   0,
        9,   38,   36,   37,    8,   36,   37,    8,   37,    7,
       36,   37,   35,   36,   37,    8,   36,   37,   36,   37,
       36,   37,   36,   37,   36,   37,   36,   37,   36,   37,
       11,   12,   37,   12,   36,   37,   10,   36,   37,   35,
       36,   37,    9,   36,   37,    9,   36,   37,    9,   11,
       12,   37,    9,   12,   36,   37,    9,   36,   37,    9,
       36,   37,    9,   36,   37,    9,   36,   37,    9,   36,
       37,    9,   35,   36,   37,   15,   36,   37,   15,   37,
       14,   36,   37,   13,   36,   37,   36,   37,   35,   36,
       37,   35,   36,   37,   35,   36,   37,   35,   36,   37,

       35,   36,   37,   35,   36,   37,   35,   36,   37,   35,
       36,   37,   15,   36,   37,   13,   36,   37,   13,   36,
       37,   13,   36,   37,   13,   36,   37,   18,   36,   37,
       18,   37,   17,   36,   37,   16,   36,   37,   36,   37,
       35,   36,   37,   35,   36,   37,   35,   36,   37,   35,
       36,   37,   35,   36,   37,   35,   36,   37,   35,   36,
       37,   35,   36,   37,   18,   36,   37,   16,   36,   37,
       16,   36,   37,   16,   36,   37,   22,   36,   37,   22,
       37,   21,   36,   37,   36,   37,   36,   37,   36,   37,
       35,   36,   37,   35,   36,   37,   35,   36,   37,   35,

       36,   37,   35,   36,   37,   35,   36,   37,   35,   36,
       37,   35,   36,   37,   22,   36,   37,   36,   37,   36,
       37,   32,   36,   37,   32,   37,   31,   36,   37,   36,
       37,   24,   36,   37,16410,   36,   37,   30,   36,   37,
       29,   36,   37,   36,   37,   35,   36,   37,   35,   36,
       37,   35,   36,   37,   35,   36,   37,   35,   36,   37,
       35,   36,   37,   35,   36,   37,   35,   36,   37,   32,
       36,   37,   24,   36,   37,16410,   24,   36,   37,16410,
       33,   36,   37,   33,   34,   36,   37,   34,   37,   33,
       35,   36,   37,    7,   11,    9,    9,   11,    9,    9,

        9,    9,    9,    9,    9,    9,    9,    9,    9,   14,
       13,   13,   13,   13,   13,   13,   17,   16,   16,   16,
       16,   16,   21,   19,   19,   31,   27, 8218,   24,16410,
       24,16410,   24,16410,   24,16410,    9,    9,    9,    9,
        9,    9,   13,   13,   13,   13,   13,   16,   16,   16,
       16,   19,   20,   19,   25,   24,16410,   24,16410,    6,
        9,    9,    9,    6,    9,    6,    9,   11,    9,    9,
       13,   13,   13,   13,   16,   16,   16,    6,   28,   28,
       24,16410,    9,    9,    9,    9,    9,   13,   13,   13,
       13,   16,   16,   16,   24,16410,    9,    9,    9,    9,

        9,   13,   13,   13,   13,   16,   16,   16,   24,16410,
        9,    9,    9,    9,    9,   13,   13,   13,   13,   16,
       16,   16,   24,16410,    9,    9,    9,    9,    9,   13,
       13,   13,   16,   16,    2,    5,    1,    2,    9,    2,
        9,   11,    9,    9,    5,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,   13,   13,   13,   16,
       16,    5,   19,   23,    5,    9,    9,    5,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,   13,   13,   13,   16,   16,
       23,    9,    9,    9,    9,    9,    9,    9,    9,    9,

        9,    9,    9,    9,   13,   13,   13,   16,   16,    4,
        4,    9,    4,    9,   11,    9,    9,    9,    9,   13,
        9,   13,    9,   13,    9,   13,    9,   13,    9,   13,
        3,    3,    9,    3,    9,   11
    } ;

static yyconst flex_int16_t yy_accept[808] =
    {   0,
        1,    1,    1,    1,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    3,    5,    8,   10,   13,
       16,   19,   21,   23,   25,   27,   29,   31,   34,   37,
       40,   43,   46,   49,   53,   57,   60,   63,   66,   69,
       72,   76,   79,   81,   84,   87,   89,   92,   95,   98,
      101,  104,  107,  110,  113,  116,  119,  122,  125,  128,
      131,  133,  136,  139,  141,  144,  147,  150,  153,  156,
      159,  162,  165,  168,  171,  174,  177,  180,  182,  185,
      187,  189,  191,  194,  197,  200,  203,  206,  209,  212,
      215,  218,  220,  222,  225,  227,  230,  232,  236,  238,

      241,  244,  246,  249,  252,  255,  258,  261,  264,  267,
      270,  273,  277,  281,  284,  288,  290,  294,  295,  295,
      295,  295,  295,  295,  295,  295,  295,  295,  295,  295,
      295,  295,  296,  297,  299,  300,  301,  302,  303,  304,
      305,  306,  307,  308,  309,  310,  311,  312,  312,  312,
      312,  312,  312,  312,  312,  312,  312,  313,  313,  313,
      313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
      313,  313,  313,  313,  313,  314,  315,  316,  317,  318,
      319,  319,  319,  319,  319,  319,  319,  319,  319,  319,
      320,  320,  320,  320,  320,  320,  320,  320,  320,  320,

      320,  320,  320,  320,  320,  320,  320,  321,  322,  323,
      324,  324,  324,  324,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  326,  326,  326,  326,  326,  326,  326,  326,
      326,  326,  326,  326,  326,  326,  326,  326,  326,  326,
      326,  326,  327,  327,  328,  328,  329,  331,  331,  331,
      331,  331,  331,  331,  331,  331,  331,  333,  333,  333,
      333,  333,  333,  333,  333,  333,  333,  333,  333,  333,
      333,  333,  333,  333,  333,  333,  333,  333,  333,  333,

      333,  333,  333,  333,  333,  333,  333,  333,  333,  333,
      333,  333,  333,  333,  335,  337,  337,  337,  337,  337,
      337,  337,  337,  338,  339,  340,  341,  342,  343,  343,
      343,  343,  343,  343,  343,  343,  343,  343,  343,  344,
      345,  346,  347,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  349,  350,  351,  352,  353,  353,
      353,  353,  353,  353,  353,  353,  353,  353,  353,  353,
      354,  355,  355,  355,  355,  355,  355,  355,  355,  355,
      355,  355,  355,  355,  355,  355,  355,  355,  355,  355,
      355,  355,  355,  355,  355,  355,  355,  355,  355,  355,

      355,  355,  355,  355,  355,  355,  355,  355,  355,  355,
      355,  355,  355,  355,  355,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  358,  360,  360,  360,  360,  361,  361,
      361,  361,  362,  363,  364,  366,  369,  370,  371,  371,
      371,  371,  372,  373,  374,  375,  375,  375,  375,  376,
      377,  378,  378,  378,  378,  378,  378,  378,  378,  378,
      378,  378,  378,  378,  378,  378,  378,  378,  378,  378,
      378,  378,  378,  378,  378,  378,  378,  378,  378,  378,

      378,  378,  378,  378,  378,  379,  379,  379,  379,  379,
      379,  379,  379,  379,  379,  379,  379,  379,  379,  379,
      379,  379,  380,  381,  383,  383,  383,  383,  383,  383,
      383,  384,  385,  386,  387,  388,  389,  390,  391,  392,
      393,  394,  395,  395,  395,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  395,  395,  395,  395,  395,
      395,  397,  397,  397,  397,  397,  397,  397,  398,  399,
      400,  401,  402,  403,  404,  405,  406,  407,  408,  409,
      409,  409,  409,  409,  409,  411,  411,  411,  411,  411,
      411,  411,  412,  413,  414,  415,  416,  417,  418,  419,

      420,  421,  422,  423,  423,  423,  425,  425,  425,  425,
      425,  425,  425,  426,  427,  428,  429,  430,  431,  432,
      433,  434,  435,  435,  435,  435,  436,  436,  436,  437,
      437,  437,  437,  437,  437,  437,  437,  437,  437,  438,
      438,  440,  443,  444,  445,  447,  448,  449,  450,  451,
      452,  453,  454,  455,  456,  457,  458,  459,  460,  461,
      462,  464,  464,  465,  465,  465,  465,  465,  465,  465,
      465,  465,  465,  465,  465,  466,  466,  466,  466,  466,
      466,  466,  466,  466,  466,  466,  466,  466,  466,  466,
      466,  466,  467,  468,  470,  471,  472,  473,  474,  475,

      476,  477,  478,  479,  480,  481,  482,  483,  484,  485,
      486,  487,  488,  489,  490,  491,  492,  492,  492,  492,
      492,  492,  492,  492,  492,  492,  492,  492,  492,  492,
      492,  492,  492,  492,  492,  492,  492,  492,  492,  492,
      492,  492,  492,  492,  492,  493,  494,  495,  496,  497,
      498,  499,  500,  501,  502,  503,  504,  505,  506,  507,
      508,  509,  510,  510,  510,  510,  510,  510,  510,  510,
      510,  510,  510,  511,  511,  511,  511,  511,  513,  516,
      517,  518,  519,  520,  521,  521,  521,  521,  521,  522,
      523,  523,  524,  525,  525,  526,  527,  527,  528,  529,

      529,  530,  531,  532,  534,  537,  537
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    9,   10,   11,   12,   12,
       12,   11,   11,   12,   11,   13,   14,   11,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   16,   17,   18,
       19,   20,   21,   22,   23,   15,   24,   25,   26,   15,
       15,   15,   27,   15,   15,   28,   29,   30,   31,   15,
       15,   15,   32,   15,   15,   15,   15,   33,   15,   15,
       11,   11,   11,   15,   34,   15,   35,   36,   37,   38,

       39,   40,   15,   41,   42,   15,   15,   43,   44,   45,
       46,   47,   15,   48,   49,   50,   51,   15,   15,   15,
       52,   15,   11,   12,   11,   11,    1,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   56,   56,   57,   57,   57,   57,   57,   57,   57,

       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   58,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   60,   61,   61,   62,
       63,   63,   63,   64,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56
    } ;

static yyconst flex_int32_t yy_meta[65] =
    {   0,
        1,    2,    3,    1,    4,    5,    6,    7,    7,    7,
        7,    7,    7,    7,    7,    8,    6,    5,    7,    5,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    1,    1,    1,    1,    7,    7,    7,    7,
        7,    7,    7,    7
    } ;

static yyconst flex_int16_t yy_base[840] =
    {   0,
        0,   63,  125,  188,  252,  316,  380,  444,  508,  572,
      636,  700,  763,  826, 2813, 2814, 2814, 2814,    0, 2814,
        5, 2769, 2772, 2780, 2783,    0, 2805, 2804, 2803, 2814,
     2802, 2801,   12, 2800, 2799,    5,    6,   13,   10,   19,
     2798, 2814, 2814,    0,   14,   36,   26, 2745,   29,   48,
       50,   52,   55, 2746,   21,  881,  100,    3,   92, 2814,
     2814,    0,  101,   87,   59, 2743,   79,   82,   99,   83,
      102, 2744,  169,  936,  136,  170, 2814, 2814,    0,  999,
      161, 1062,  114, 2741,  145,  119,  148,  122,  152, 2742,
      210, 1125,  200, 2814, 2814,    0, 2787, 1188,  216, 2814,

     2814, 1251,  174, 2738,  178,  181,  210,  185,  228, 2739,
      299, 1314,  241, 2814, 2814, 2814, 2814,    0,  326, 2748,
     2751, 2759, 2762,  245, 2740,   50, 2761, 2752, 2734, 2740,
     2779, 2778, 2777, 2776,  335,    9,  258,  112,   18,  234,
      283,  263,  299,  137,  286,    0, 2739,  344,  237, 2722,
      240,  234,  293,  244,  312, 2723, 2736,  338, 2719,  356,
      303,  359,  334,  362, 2720,  365,  368,  371,  374,  377,
      402,  412,  466, 2721,  436,  314,  329,  356,    0, 2732,
      420,  432, 2715,  435,  399,  466,  404,  476, 2716, 2729,
      479, 2712,  482,  463,  485,  468,  488, 2713,  491,  494,

      497,  500,  503,  530,  540,  594,  564,  572,  547,    0,
      604, 2735,  600, 2734,  559, 2708,  562,  506,  594,  553,
      612, 2709, 2731,  615, 2705,  618,  591,  621,  596,  624,
     2706, 1377,  706, 2741,  667,  672, 2740, 2739,  729,  719,
     2735, 2737,  580,  628, 2698,  632,  659,  686,  660,  694,
     2699,  697,  720,  728,  731,  734,  737,  740,  774,    2,
      463,    0, 2744, 2814,  794, 2814, 2720,  746,  759, 2694,
      779,  669,  782,  690,  785, 2695, 2717,  788, 2691,  791,
      716,  794,  743,  797, 2692,    0,  851,  852,  853,  857,
      835,  898,  905, 2724, 2736,  810, 2687,  813,  807,  821,

      847,  851, 2688,  861,  868,  873,  876,  879,  882,  896,
      950, 2710, 2713,  887,  572, 2697, 2694, 2694,  955, 2708,
     2699, 2683,  921,  578,  866,  961,  332,  958,  914,  917,
      926,  929,  932,  935,  952,  957,  960,  966,  934,  983,
     1026,  964,  424,  979,  982,  985,  988,  991,  994,  997,
     1000, 1062, 1078,  984, 1040, 1134, 1101, 2814, 1088, 1092,
     1095, 1098, 1103, 1106, 1109, 1172, 1194, 1108, 1192, 2814,
     1173, 2725, 1126, 2676, 1148,  963, 1155, 1162, 1165, 2677,
     1309, 2712, 2691, 1168, 2651, 1171, 1174, 1176, 1178, 1183,
     2643, 1305, 1312, 1251, 1279, 1282, 1285, 1288, 1292, 1295,

     1300, 1308, 1311, 1428, 1212, 1314, 1389, 1392, 1395, 1398,
     1401, 1406, 1460, 1461, 2814, 1462, 1466, 1470, 1468, 1472,
     1440, 2640, 1443, 1201, 1446, 1273, 1449, 2640, 1503, 1504,
     1472, 1475, 1478, 1481, 1484, 1487, 1490, 1493, 1496, 1499,
     2644, 2634, 1553, 1214, 2625, 2624, 2607, 1557, 2619, 2604,
     2598,  989, 1454, 1023, 1561, 1565, 1356, 1265, 1518, 1521,
     1524, 1444,  579,  703, 1468, 1527, 1531, 1534, 1452, 1475,
     1566, 1538, 1541, 1544, 1598, 1599, 1605, 1560, 2578, 1566,
     1555, 1572, 1568, 1575, 2567, 1629, 1631, 1584, 1598, 1601,
     1604, 1607, 1610, 1613, 1616, 1619, 1622, 1625, 1628, 1631,

     1634, 1637, 1640, 1643, 1697, 1679, 1651, 1657, 1660, 1664,
     1667, 1670, 1673, 1676, 1679, 1682, 1685, 1688, 1691, 1745,
     2580, 1749, 1755, 1731, 2549, 2469, 2474, 2475, 2469, 2466,
     1599,  906, 1355,  971, 1482, 1723, 1725, 1173,  171, 1724,
     1726, 1738, 1720, 1725, 1728, 1731, 1734, 1737, 1740, 1743,
     1746, 1749, 1752, 1755, 1758, 1677, 1761, 1764, 1767, 2478,
     1793, 2461, 2464, 2448, 2467, 2412, 2420, 1115, 1608, 1126,
     1353, 1822, 1476, 1331, 1796, 1606, 1792, 1789, 1799, 1779,
     1787, 1790, 2369, 2356, 2353, 2332, 2313, 2318, 1844, 2323,
     2322, 1827, 1833, 1834, 1845, 1849, 1812, 1814, 1852, 1820,

     1819, 1822, 1863, 1865, 2325, 1869, 1876, 2310, 2245, 1901,
     1883, 2223, 1905, 1863, 1211, 1965, 1869, 1850,  304, 1834,
     1851, 1430, 2028, 1892, 2091, 1910, 2158, 2098, 1899, 1862,
     1874, 2044, 1877, 1880, 1882, 1884, 1887, 1979, 1941, 1969,
     1945, 1949, 1952, 1954, 2155, 2219, 1953, 1976, 1981, 1986,
     1988, 1990, 1997, 1984, 1970, 1935, 1731, 1956, 1955, 1941,
     2044, 2282, 2000, 1952, 1923, 1937, 2000, 1943, 2003, 2005,
     2011, 1845, 1851, 1583, 2065, 2018, 1561, 2021, 2008, 2024,
     2014, 2027, 1469, 2049, 2052, 2056, 2059, 2062, 2065, 2068,
     1239, 2080, 2045,    0, 2092, 2121, 2124, 2127, 2129, 2131,

     2134, 2137, 2138, 2141, 2171, 2194, 2197, 2200, 2203, 1985,
     2090,  670, 2094, 2097, 1281, 2095, 2113, 1079, 2116, 2085,
     2174, 2109, 2177, 1013, 2183, 2186, 2189, 2206, 2209, 2212,
     2215,  862, 2291, 2247, 2250, 2253, 2256, 2259, 2262, 2265,
     2268, 2271, 2274,  763, 2196, 2328, 2282, 2294, 2331, 2335,
     2347, 2350, 2353, 2356, 2359, 2362, 2366, 2249, 2389, 2194,
     2312, 2393, 2313, 2317, 2320, 2323, 2326, 2366, 2369, 2372,
     2376, 2380, 2434, 2387, 2390, 2393,  734, 2447, 2451, 2454,
     2457, 2460, 1872, 2163, 2411, 2414, 2417,  619, 2198, 2092,
      348, 2455, 2159,  217, 1857, 2247,   36, 2456, 2315, 2471,

     2475, 2479, 2483, 2487, 2491, 2814, 2518, 2526, 2534, 2542,
     2550, 2558, 2566, 2574, 2582, 2590, 2597, 2604,   11, 2609,
     2617,    4, 2622, 2630, 2637, 2641, 2649, 2657, 2664, 2668,
     2673, 2678, 2683, 2690, 2697, 2703, 2707, 2715, 2720
    } ;

static yyconst flex_int16_t yy_def[840] =
    {   0,
      807,  807,  808,  809,  810,  810,  811,  811,  812,  812,
      813,  813,  814,  814,  806,  806,  806,  806,  815,  806,
      806,  806,  806,  806,  806,  806,  816,  816,  816,  806,
      816,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  806,  806,  818,  819,  820,  806,  806,  806,  806,
      806,  806,  806,  806,  806,  819,   56,   56,   56,  806,
      806,  821,  822,  823,  806,  806,  806,  806,  806,  806,
      806,  806,  806,  822,   74,   74,  806,  806,  824,  825,
      826,  806,  806,  806,  806,  806,  806,  806,  806,  806,
      806,  825,   92,  806,  806,  827,  828,  829,  830,  806,

      806,  806,  806,  806,  806,  806,  806,  806,  806,  806,
      806,  829,  112,  806,  806,  806,  806,  815,  806,  806,
      806,  806,  806,  806,  806,  806,  806,  806,  806,  806,
      816,  816,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  818,   56,  820,  806,  806,
      806,  806,  806,  806,  806,  806,   56,  806,  806,  806,
      806,  806,  806,  806,  806,  806,  806,  806,  806,  806,
      806,  806,  806,  806,   56,   56,   56,   56,  821,   74,
      823,  806,  806,  806,  806,  806,  806,  806,  806,   74,
      806,  806,  806,  806,  806,  806,  806,  806,  806,  806,

      806,  806,  806,  806,  806,  806,   74,   74,   74,  824,
      806,   92,  826,   92,  806,  806,  806,  806,  806,  806,
      806,  806,   92,  806,  806,  806,  806,  806,  806,  806,
      806,  806,  232,   82,   82,  831,   82,   82,   82,  232,
      806,   82,   92,  806,  806,  806,  806,  806,  806,  806,
      806,  806,  806,  806,  806,  806,  806,  806,  806,   92,
       92,  827,  828,  806,  806,  806,  112,  830,  806,  806,
      806,  806,  806,  806,  806,  806,  112,  806,  806,  806,
      806,  806,  806,  806,  806,  102,  102,  102,  102,  102,
      832,  102,  102,  806,  806,  806,  806,  806,  806,  806,

      806,  806,  806,  806,  806,  806,  806,  806,  806,  806,
      806,  806,  806,  112,  112,  806,  806,  806,  806,  806,
      806,  806,  817,  817,  817,  817,  817,  817,  806,  806,
      806,  806,  806,  806,  806,  806,  806,  806,   56,   56,
       56,   56,   56,  806,  806,  806,  806,  806,  806,  806,
      806,  806,  806,   74,   74,   74,   74,  806,  806,  806,
      806,  806,  806,  806,  806,  232,  232,  833,  232,  806,
      232,  806,  806,  806,  806,  806,  806,  806,  806,  806,
       82,   82,   82,  806,  806,  806,  806,  806,  806,  806,
      806,   82,   82,  806,  806,  806,  806,  806,  806,  806,

      806,  806,  806,   92,   92,  806,  806,  806,  806,  806,
      806,  806,  102,  102,  806,  806,  102,  102,  102,  102,
      806,  806,  806,  806,  806,  806,  806,  806,  102,  102,
      806,  806,  806,  806,  806,  806,  806,  806,  806,  806,
      806,  806,  112,  112,  806,  806,  806,  806,  806,  806,
      806,  817,  817,  817,  817,  817,  817,  817,  806,  806,
      806,   56,   56,   56,   56,  806,  806,  806,   74,   74,
       74,  806,  806,  806,  232,  232,  232,  806,  806,  806,
      806,  806,  806,  806,  806,  232,  232,  806,  806,  806,
      806,  806,  806,  806,  806,  806,  806,  806,  806,  806,

      806,  806,  806,  806,  806,   92,  806,  806,  806,  806,
      806,  806,  806,  806,  806,  806,  806,  806,  806,  806,
      806,  806,  806,  112,  806,  806,  806,  806,  806,  806,
      817,  817,  817,  817,  817,   56,   56,   56,   56,   74,
       74,   74,  806,  806,  806,  806,  806,  806,  806,  806,
      806,  806,  806,  806,  806,   92,  806,  806,  806,  806,
      112,  806,  806,  806,  806,  806,  806,  817,  817,  817,
      817,  817,   56,   56,   56,   56,   74,   74,   74,  806,
      806,  806,   92,  806,  112,  806,  806,  806,  806,  806,
      806,  817,  817,  817,  817,  817,   56,   56,   56,   56,

       74,   74,   74,   92,  806,  112,  806,  806,  806,  834,
      806,  806,  817,  817,  817,  835,  817,   56,   56,   56,
       74,   74,  834,  806,  836,  806,  806,  806,  623,  837,
      806,  806,  806,  806,  806,  806,  806,  806,  806,  806,
      817,  817,  817,  817,  835,  838,  817,  817,  817,  817,
      817,  817,  817,  817,  817,   56,   56,   56,   74,   74,
      623,  836,  662,  839,  806,  806,  806,  806,  806,  806,
      806,  806,  806,  806,  623,  806,  806,  806,  806,  806,
      806,  806,  806,  806,  806,  806,  806,  806,  806,  806,
      806,  817,  817,  645,  817,  817,  817,  817,  817,  817,

      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
       56,   56,   56,   74,   74,  662,  806,  806,  806,  806,
      806,  806,  806,  806,  806,  806,  806,  806,  806,  806,
      806,  806,  806,  806,  806,  806,  806,  806,  806,  806,
      806,  806,  806,  806,  817,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817,   56,   56,   56,
       74,   74,  806,  806,  806,  806,  806,  806,  806,  806,
      806,  806,  806,  806,  806,  806,  806,  817,  817,  817,
      817,  817,  817,   56,  806,  806,  806,  806,  817,   56,
      806,  817,   56,  806,  817,   56,  806,  817,   56,  806,

      817,   56,  806,  817,  817,    0,  806,  806,  806,  806,
      806,  806,  806,  806,  806,  806,  806,  806,  806,  806,
      806,  806,  806,  806,  806,  806,  806,  806,  806,  806,
      806,  806,  806,  806,  806,  806,  806,  806,  806
    } ;

static yyconst flex_int16_t yy_nxt[2879] =
    {   0,
      806,   17,   18,   17,   17,   19,  119,  134,  134,  119,
      180,  134,  134,  135,  134,  134,  135,  147,  806,  806,
      134,  134,  173,  148,  806,  173,  404,  120,  177,  121,
      122,  212,  123,  124,  136,  144,  137,  138,  129,  139,
      140,  147,  143,  144,  142,  121,  122,  141,  123,  174,
      130,  141,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   21,   18,   17,   21,   19,  145,
      149,  150,  151,  152,  153,  154,  155,  156,  147,  147,
      147,  167,  167,  167,  800,   22,  317,   23,   24,  318,
       25,   26,  158,  159,  160,  161,  162,  163,  164,  165,

      168,  168,  169,  169,  169,  170,  170,  171,  171,  171,
      181,  180,  180,  180,  134,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   28,   29,  176,
      147,  200,  200,  200,  201,  201,  203,  203,  147,  134,
       30,  143,  178,  191,  192,  193,  194,  195,  196,  197,
      198,  202,  202,  202,  204,  204,  204,  182,  183,  184,
      185,  186,  187,  188,  189,  208,  212,  212,  212,  327,
      206,  254,  254,  206,  180,  256,  256,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   33,
       34,   35,   33,  121,  122,  209,  123,  253,  253,  253,

      255,  255,  255,   30,  257,  257,  257,  576,  180,  147,
       36,  259,   37,   38,  259,   39,   40,  224,  225,  226,
      227,  228,  229,  230,  231,  261,  267,  267,  267,  212,
      305,  305,  305,  306,  306,  122,  134,  123,  308,  308,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   16,   42,   43,   42,   42,   44,   16,  797,
      134,   46,  307,  307,  307,  134,  315,   16,   16,   16,
      267,   16,  278,  279,  280,  281,  282,  283,  284,  285,
      309,  309,  309,  129,  145,  134,  168,  168,  134,  147,
      147,  147,  167,  167,  167,  130,  142,  170,  170,  324,

      311,  134,  325,  311,   20,   20,   20,   20,   47,   48,
       49,   50,   51,   52,   53,   54,   16,   55,   43,   42,
       55,   44,   16,  326,  312,   46,  313,  119,  328,  323,
      119,   16,   16,   16,  134,   16,  135,  134,  341,  135,
       56,   57,  147,   58,   59,  169,  169,  169,  120,  657,
      121,  122,  147,  123,  124,  331,  331,  136,  457,  137,
      138,  342,  139,  140,  171,  171,  171,  147,   20,   20,
       20,   20,   47,   48,   49,   50,   51,   52,   53,   54,
       16,   60,   61,   60,   60,   62,   16,  333,  333,   64,
      157,  157,  157,  794,  147,   16,   16,   16,  343,   16,

      158,  159,  160,  161,  162,  163,  164,  165,  330,  330,
      330,  332,  332,  332,  334,  334,  334,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  336,
      336,  336,   20,   20,   20,   20,   65,   66,   67,   68,
       69,   70,   71,   72,   16,   73,   61,   60,   73,   62,
       16,  201,  201,   64,  337,  337,  337,  203,  203,   16,
       16,   16,  147,   16,  338,  338,  338,  173,   74,   75,
      173,   76,  339,  465,  147,  340,  191,  192,  193,  194,
      195,  196,  197,  198,  180,  180,  180,  200,  200,  200,
      121,  122,  212,  123,  174,  405,   20,   20,   20,   20,

       65,   66,   67,   68,   69,   70,   71,   72,   16,   77,
       78,   77,   77,   79,   16,  346,  346,   81,  202,  202,
      202,  348,  348,   16,   16,   16,   82,   16,  204,  204,
      204,  190,  190,  190,  345,  345,  345,  347,  347,  347,
      349,  349,  349,  180,  180,  180,  180,  180,  180,  180,
      180,  180,  180,  180,  180,  351,  351,  351,  254,  254,
       20,   20,   20,   20,   83,   84,   85,   86,   87,   88,
       89,   90,   16,   91,   78,   77,   91,   79,   16,  357,
      134,   81,  352,  352,  352,  180,  240,   16,   16,   16,
       82,   16,  353,  353,  353,  206,  356,   92,  206,   93,

      354,  267,  180,  355,  444,  211,  256,  256,  211,  212,
      180,  212,  212,  212,  253,  253,  253,  147,  121,  122,
      453,  123,  358,  537,   20,   20,   20,   20,   83,   84,
       85,   86,   87,   88,   89,   90,   16,   94,   95,   94,
       94,   96,   97,  361,  361,   99,  255,  255,  255,  363,
      363,  100,  101,  102,  791,   16,  224,  225,  226,  227,
      228,  229,  230,  231,  257,  257,  257,  223,  223,  223,
      360,  360,  360,  362,  362,  362,  364,  364,  364,  381,
      234,  234,  234,  370,  395,  395,  395,  382,   20,   20,
       20,   20,  103,  104,  105,  106,  107,  108,  109,  110,

       16,  111,   95,   94,  111,   96,   97,  806,  147,   99,
      240,  396,  396,  398,  398,  100,  101,  102,  759,   16,
      806,  306,  306,  240,  366,  112,  538,  113,  384,  385,
      386,  387,  388,  389,  390,  391,  392,  366,  397,  397,
      397,  147,  393,  308,  308,  370,  399,  399,  399,  212,
      212,  212,   20,   20,   20,   20,  103,  104,  105,  106,
      107,  108,  109,  110,  115,  116,  115,  115,  408,  408,
      238,  238,  212,  212,  212,  259,  238,  788,  259,  238,
      212,  212,  212,  212,  212,  212,  401,  401,  401,  402,
      402,  402,  403,  403,  403,  265,  410,  410,  265,  122,

      266,  123,  278,  279,  280,  281,  282,  283,  284,  285,
      266,  267,  267,  267,  777,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  115,  116,  115,
      115,  305,  305,  305,  307,  307,  307,  309,  309,  309,
      277,  277,  277,  407,  407,  407,  409,  409,  409,  411,
      411,  411,  413,  416,  416,  414,  417,  417,  416,  433,
      433,  417,  289,  289,  289,  432,  432,  432,  134,  418,
      415,  415,  415,  434,  434,  434,  415,  419,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      148,  421,  422,  423,  424,  425,  426,  427,  428,  416,

      435,  435,  417,  436,  436,  436,  416,  454,  134,  417,
      733,  443,  429,  267,  267,  267,  267,  415,  430,  175,
      267,  267,  267,  134,  415,  267,  267,  267,  267,  267,
      267,  438,  438,  438,  439,  439,  439,  149,  150,  151,
      152,  153,  154,  155,  156,  181,  288,  288,  440,  440,
      440,  311,  288,  569,  311,  288,  448,  448,  448,  448,
      134,  452,  455,  456,  455,  455,  157,  157,  157,  157,
      157,  157,  147,  134,  207,  312,  462,  313,  157,  157,
      157,  157,  157,  157,  459,  459,  459,  460,  460,  460,
      464,  134,  182,  183,  184,  185,  186,  187,  188,  189,

      211,  571,  147,  211,  461,  461,  461,  458,  213,  147,
      147,  147,  147,  147,  147,  490,  490,  214,  147,  147,
      147,  147,  180,  531,  463,  134,  469,  448,  448,  448,
      448,  190,  190,  190,  190,  190,  190,  190,  190,  190,
      190,  190,  190,  466,  466,  466,  467,  467,  467,  468,
      468,  468,  180,  180,  180,  215,  216,  217,  218,  219,
      220,  221,  222,  211,  147,  769,  232,  533,  233,  234,
      235,  236,  237,  238,  239,  237,  234,  240,  180,  241,
      242,  470,  237,  243,  234,  234,  234,  234,  234,  234,
      234,  234,  234,  234,  234,  237,  234,  234,  234,  234,

      234,  234,  234,  234,  234,  234,  234,  234,  234,  234,
      234,  234,  234,  234,  180,  180,  180,  134,  244,  245,
      246,  247,  248,  249,  250,  251,  211,  471,  134,  211,
      180,  180,  180,  763,  213,  448,  448,  448,  448,  180,
      223,  223,  223,  214,  223,  223,  223,  223,  223,  223,
      223,  223,  223,  592,  260,  472,  472,  472,  473,  473,
      473,  474,  474,  474,  478,  479,  480,  481,  482,  483,
      484,  485,  180,  806,  806,  594,  240,  240,  366,  366,
      366,  215,  216,  217,  218,  219,  220,  221,  222,  265,
      366,  366,  265,  806,  266,  806,  240,  268,  240,  486,

      489,  489,  489,  575,  266,  487,  475,  491,  491,  491,
      366,  147,  366,  134,  476,  492,  492,  493,  493,  493,
      383,  383,  383,  496,  496,  496,  497,  497,  498,  498,
      498,  499,  499,  233,  233,  500,  500,  500,  506,  233,
      524,  212,  233,  267,  269,  270,  271,  272,  273,  274,
      275,  276,  286,  512,  512,  287,  644,  288,  289,  290,
      291,  292,  288,  293,  292,  289,  292,  134,  294,  289,
      744,  292,  295,  289,  289,  289,  289,  289,  289,  289,
      289,  289,  289,  289,  292,  289,  289,  289,  289,  289,
      289,  289,  289,  289,  289,  289,  289,  289,  289,  289,

      289,  289,  289,  234,  234,  234,  535,  296,  297,  298,
      299,  300,  301,  302,  303,  265,  392,  381,  265,  180,
      266,  370,  393,  268,  381,  370,  514,  514,  370,  762,
      266,  234,  234,  234,  234,  234,  234,  234,  234,  234,
      502,  502,  502,  314,  503,  503,  503,  504,  504,  504,
      238,  238,  212,  212,  212,  134,  238,  134,  134,  238,
      212,  212,  212,  212,  212,  212,  277,  277,  277,  147,
      269,  270,  271,  272,  273,  274,  275,  276,  211,  534,
      598,  232,  595,  233,  366,  367,  368,  240,  233,  369,
      240,  366,  240,  370,  241,  371,  570,  240,  372,  366,

      366,  366,  366,  366,  366,  366,  366,  366,  366,  366,
      240,  366,  366,  366,  366,  366,  366,  366,  366,  366,
      366,  366,  366,  366,  366,  366,  366,  366,  366,  505,
      448,  448,  505,  373,  374,  375,  376,  377,  378,  379,
      380,  277,  277,  277,  277,  277,  277,  277,  277,  277,
      507,  507,  507,  508,  508,  508,  134,  212,  509,  509,
      509,  413,  413,  416,  414,  414,  416,  416,  180,  416,
      417,  416,  417,  416,  417,  660,  417,  429,  536,  415,
      415,  415,  147,  430,  134,  415,  540,  415,  532,  415,
      180,  415,  420,  420,  420,  511,  511,  511,  513,  513,

      513,  515,  515,  515,  416,  416,  147,  417,  417,  539,
      597,  288,  288,  180,  147,  418,  418,  288,  572,  541,
      288,  740,  415,  415,  289,  289,  289,  289,  289,  289,
      289,  289,  289,  289,  289,  289,  517,  517,  517,  518,
      518,  518,  519,  519,  519,  267,  267,  267,  267,  267,
      267,  267,  267,  267,  522,  523,  523,  522,  448,  448,
      448,  448,  455,  456,  455,  455,  455,  456,  455,  455,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  190,
      190,  190,  267,  190,  190,  190,  190,  190,  190,  542,
      223,  223,  223,  223,  223,  223,  223,  223,  223,  806,

      806,  134,  240,  240,  180,  486,  806,  545,  545,  240,
      134,  487,  477,  477,  477,  734,  366,  366,  544,  544,
      544,  547,  547,  366,  546,  546,  546,  548,  548,  548,
      806,  733,  806,  240,  568,  240,  366,  366,  366,  233,
      233,  475,  593,  475,  147,  233,  600,  366,  233,  366,
      366,  366,  366,  366,  366,  366,  366,  366,  366,  550,
      550,  550,  551,  551,  551,  552,  552,  552,  383,  383,
      383,  383,  383,  383,  383,  383,  383,  383,  383,  383,
      553,  553,  553,  554,  554,  554,  555,  555,  555,  234,
      234,  234,  234,  234,  234,  234,  234,  234,  505,  448,

      448,  505,  556,  277,  277,  277,  212,  583,  212,  277,
      277,  277,  277,  277,  277,  358,  420,  420,  420,  420,
      420,  420,  420,  420,  420,  420,  420,  420,  557,  557,
      557,  558,  558,  558,  559,  559,  559,  289,  289,  289,
      289,  289,  289,  289,  289,  289,  523,  523,  523,  523,
      522,  523,  523,  522,  561,  266,  523,  523,  523,  523,
      267,  147,  180,  147,  180,  266,  574,  578,  579,  147,
      573,  577,  477,  477,  477,  712,  180,  477,  477,  477,
      477,  477,  477,  477,  477,  477,  580,  580,  580,  581,
      581,  581,  582,  582,  582,  366,  366,  366,  366,  366,

      366,  366,  366,  366,  383,  383,  383,  383,  383,  383,
      383,  383,  383,  420,  420,  420,  420,  420,  420,  420,
      420,  420,  267,  585,  134,  599,  601,  180,  603,  134,
      180,  477,  477,  477,  147,  134,  134,  180,  602,  477,
      477,  477,  477,  477,  477,  610,  616,  134,  610,  616,
      147,  134,  147,  610,  620,  619,  610,  180,  147,  134,
      180,  618,  596,  622,  610,  134,  623,  610,  621,  623,
      625,  134,  147,  625,  134,  615,  613,  626,  626,  626,
      626,  658,  614,  617,  639,  639,  639,  639,  147,  180,
      147,  656,  659,  662,  212,  732,  662,  731,  267,  798,

      806,  180,  610,  806,  643,  610,  641,  642,  641,  641,
      630,  626,  626,  626,  626,  789,  655,  629,  676,  677,
      678,  679,  680,  681,  682,  683,  629,  629,  629,  685,
      685,  685,  686,  686,  687,  687,  687,  688,  688,  689,
      689,  689,  639,  639,  639,  639,  641,  642,  641,  641,
      641,  642,  641,  641,  134,  134,  134,  631,  632,  633,
      634,  635,  636,  637,  638,  133,  616,  134,  133,  616,
      133,  133,  134,  147,  646,  663,  663,  663,  134,  180,
      711,  133,  133,  134,  133,  715,  134,  134,  134,  713,
      134,  725,  134,  180,  147,  727,  727,  692,  693,  134,

      714,  806,  691,  710,  806,  645,  645,  645,  717,  718,
      719,  720,  721,  722,  723,  724,  757,  133,  133,  133,
      133,  647,  648,  649,  650,  651,  652,  653,  654,  623,
      703,  690,  623,  704,  704,  704,  709,  630,  705,  705,
      706,  706,  706,  707,  707,  806,  661,  134,  806,  708,
      708,  708,  726,  726,  726,  728,  728,  728,  729,  729,
      736,  736,  629,  730,  730,  730,  806,  738,  738,  806,
      675,  675,  675,  735,  735,  735,  737,  737,  737,  739,
      739,  739,  134,  629,  631,  632,  633,  634,  635,  636,
      637,  638,  625,  746,  134,  625,  806,  266,  684,  806,

      664,  629,  629,  629,  629,  629,  629,  266,  629,  629,
      629,  629,  629,  629,  741,  741,  741,  742,  742,  742,
      743,  743,  743,  134,  745,  760,  134,  793,  147,  134,
      147,  134,  147,  134,  758,  180,  134,  765,  765,  134,
      134,  761,  674,  134,  694,  694,  694,  665,  666,  667,
      668,  669,  670,  671,  672,  133,  133,  134,  133,  133,
      133,  133,  767,  767,  646,  716,  716,  716,  764,  764,
      764,  133,  133,  134,  133,  747,  748,  748,  748,  749,
      749,  750,  750,  750,  751,  751,  752,  752,  752,  753,
      645,  645,  645,  645,  645,  645,  134,  147,  134,  134,

      134,  147,  134,  673,  796,  134,  790,  133,  133,  133,
      133,  647,  648,  649,  650,  651,  652,  653,  654,  133,
      133,  134,  133,  645,  645,  645,  766,  766,  766,  768,
      768,  768,  147,  792,  675,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  746,  784,  645,  645,  645,  754,
      754,  754,  755,  755,  755,  756,  756,  756,  663,  663,
      663,  770,  770,  770,  771,  771,  771,  772,  772,  772,
      640,  133,  133,  133,  133,  695,  696,  697,  698,  699,
      700,  701,  702,  662,  134,  147,  662,  147,  806,  799,
      628,  664,  773,  773,  773,  773,  134,  759,  806,  675,

      675,  675,  675,  675,  675,  675,  675,  675,  675,  675,
      675,  774,  774,  774,  775,  775,  775,  776,  776,  776,
      629,  629,  629,  629,  629,  629,  629,  629,  629,  778,
      779,  778,  778,  134,  694,  694,  694,  134,  665,  666,
      667,  668,  669,  670,  671,  672,  694,  694,  694,  134,
      180,  627,  134,  147,  624,  134,  612,  611,  134,  609,
      762,  134,  608,  802,  134,  716,  716,  716,  134,  716,
      716,  716,  716,  716,  716,  716,  716,  716,  785,  785,
      785,  607,  606,  694,  694,  694,  605,  694,  694,  694,
      773,  773,  773,  773,  773,  773,  773,  773,  604,  780,

      780,  780,  781,  781,  781,  782,  782,  782,  645,  645,
      645,  645,  645,  645,  645,  645,  645,  783,  786,  786,
      786,  787,  787,  787,  663,  663,  663,  147,  663,  663,
      663,  180,  663,  663,  663,  773,  773,  773,  773,  675,
      675,  675,  675,  675,  675,  675,  675,  675,  778,  779,
      778,  778,  778,  779,  778,  778,  134,  134,  134,  134,
      591,  590,  134,  716,  716,  716,  716,  716,  716,  716,
      716,  716,  803,  803,  803,  803,  804,  805,  804,  804,
      803,  803,  803,  803,  803,  803,  803,  803,  804,  805,
      804,  804,  804,  805,  804,  804,  589,  588,  587,  586,

      795,  584,  567,  566,  801,  565,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  564,  563,  147,   16,   16,
       16,   16,   16,   16,   16,   16,   27,   27,   27,   27,
       27,   27,   27,   27,   32,   32,   32,   32,   32,   32,
       32,   32,   45,   45,   45,   45,   45,   45,   45,   45,
       63,   63,   63,   63,   63,   63,   63,   63,   80,   80,
       80,   80,   80,   80,   80,   80,   98,   98,   98,   98,
       98,   98,   98,   98,  114,  114,  114,  114,  114,  114,
      114,  114,  118,  118,  562,  118,  118,  118,  118,  118,
      131,  131,  131,  131,  131,  131,  131,  133,  133,  133,

      133,  133,  133,  133,  146,  146,  560,  146,  146,  146,
      146,  146,  157,  157,  157,  157,  157,  179,  179,  549,
      179,  179,  179,  179,  179,  190,  190,  190,  190,  190,
      210,  210,  543,  210,  210,  210,  210,  210,  212,  530,
      212,  529,  528,  212,  223,  223,  223,  223,  223,  262,
      262,  527,  262,  262,  262,  262,  262,  263,  526,  525,
      263,  263,  263,  263,  263,  267,  521,  267,  520,  267,
      267,  277,  277,  277,  277,  277,  383,  383,  383,  383,
      383,  420,  420,  420,  420,  420,  477,  477,  477,  477,
      477,  629,  516,  629,  510,  501,  629,  645,  645,  645,

      645,  645,  645,  645,  663,  495,  663,  370,  663,  663,
      675,  675,  675,  675,  675,  694,  694,  694,  694,  694,
      694,  694,  694,  716,  716,  716,  716,  716,  370,  494,
      488,  240,  451,  450,  449,  447,  446,  445,  442,  441,
      437,  431,  292,  292,  412,  406,  267,  310,  304,  267,
      264,  400,  394,  370,  240,  370,  370,  370,  365,  359,
      212,  258,  252,  212,  212,  350,  344,  180,  205,  199,
      180,  130,  335,  329,  147,  172,  166,  147,  134,  134,
      132,  132,  322,  321,  320,  319,  316,  128,  127,  126,
      125,  310,  304,  264,  258,  252,  205,  199,  172,  166,

      134,  134,  134,  134,  132,  132,  132,  132,  128,  127,
      126,  125,  806,   15,  806,  806,  806,  806,  806,  806,
      806,  806,  806,  806,  806,  806,  806,  806,  806,  806,
      806,  806,  806,  806,  806,  806,  806,  806,  806,  806,
      806,  806,  806,  806,  806,  806,  806,  806,  806,  806,
      806,  806,  806,  806,  806,  806,  806,  806,  806,  806,
      806,  806,  806,  806,  806,  806,  806,  806,  806,  806,
      806,  806,  806,  806,  806,  806,  806,  806
    } ;

static yyconst flex_int16_t yy_chk[2879] =
    {   0,
        0,    1,    1,    1,    1,    1,   21,   36,   37,   21,
      822,  136,   39,   33,   33,   38,   33,  819,    0,    0,
      139,   40,   55,   45,    0,   55,  260,   21,   58,   21,
       21,  260,   21,   21,   33,   39,   33,   33,   26,   33,
       33,   58,   38,  139,   37,   55,   55,   36,   55,   55,
       26,  136,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    2,    2,    2,    2,    2,   40,
       45,   45,   45,   45,   45,   45,   45,   45,   47,   47,
       47,   49,   49,   49,  797,    2,  126,    2,    2,  126,
        2,    2,   46,   46,   46,   46,   46,   46,   46,   46,

       50,   50,   51,   51,   51,   52,   52,   53,   53,   53,
       63,   65,   65,   65,  138,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    3,    3,   57,
       59,   67,   67,   67,   68,   68,   70,   70,   57,  144,
        3,  138,   59,   64,   64,   64,   64,   64,   64,   64,
       64,   69,   69,   69,   71,   71,   71,   63,   63,   63,
       63,   63,   63,   63,   63,   75,   83,   83,   83,  144,
       73,   86,   86,   73,   75,   88,   88,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    4,
        4,    4,    4,   73,   73,   76,   73,   85,   85,   85,

       87,   87,   87,    4,   89,   89,   89,  539,   76,  539,
        4,   91,    4,    4,   91,    4,    4,   81,   81,   81,
       81,   81,   81,   81,   81,   93,  103,  103,  103,   93,
      105,  105,  105,  106,  106,   91,  140,   91,  108,  108,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    5,    5,    5,    5,    5,    5,    5,  794,
      137,    5,  107,  107,  107,  142,  113,    5,    5,    5,
      113,    5,   99,   99,   99,   99,   99,   99,   99,   99,
      109,  109,  109,  124,  140,  141,  152,  152,  145,  149,
      149,  149,  151,  151,  151,  124,  137,  154,  154,  142,

      111,  143,  142,  111,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    6,    6,    6,    6,
        6,    6,    6,  143,  111,    6,  111,  119,  145,  141,
      119,    6,    6,    6,  327,    6,  135,  135,  176,  135,
        6,    6,  619,    6,    6,  153,  153,  153,  119,  619,
      119,  119,  176,  119,  119,  161,  161,  135,  327,  135,
      135,  177,  135,  135,  155,  155,  155,  177,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        7,    7,    7,    7,    7,    7,    7,  163,  163,    7,
      158,  158,  158,  791,  178,    7,    7,    7,  178,    7,

      148,  148,  148,  148,  148,  148,  148,  148,  160,  160,
      160,  162,  162,  162,  164,  164,  164,  166,  166,  166,
      167,  167,  167,  168,  168,  168,  169,  169,  169,  170,
      170,  170,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    8,    8,    8,    8,    8,    8,
        8,  185,  185,    8,  171,  171,  171,  187,  187,    8,
        8,    8,  343,    8,  172,  172,  172,  173,    8,    8,
      173,    8,  175,  343,  175,  175,  181,  181,  181,  181,
      181,  181,  181,  181,  182,  182,  182,  184,  184,  184,
      173,  173,  261,  173,  173,  261,    8,    8,    8,    8,

        8,    8,    8,    8,    8,    8,    8,    8,    9,    9,
        9,    9,    9,    9,    9,  194,  194,    9,  186,  186,
      186,  196,  196,    9,    9,    9,    9,    9,  188,  188,
      188,  191,  191,  191,  193,  193,  193,  195,  195,  195,
      197,  197,  197,  199,  199,  199,  200,  200,  200,  201,
      201,  201,  202,  202,  202,  203,  203,  203,  218,  218,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,   10,   10,   10,   10,   10,   10,   10,  209,
      324,   10,  204,  204,  204,  209,  243,   10,   10,   10,
       10,   10,  205,  205,  205,  206,  208,   10,  206,   10,

      207,  315,  207,  207,  315,  211,  220,  220,  211,  243,
      208,  215,  215,  215,  217,  217,  217,  463,  206,  206,
      324,  206,  211,  463,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   11,   11,   11,   11,
       11,   11,   11,  227,  227,   11,  219,  219,  219,  229,
      229,   11,   11,   11,  788,   11,  213,  213,  213,  213,
      213,  213,  213,  213,  221,  221,  221,  224,  224,  224,
      226,  226,  226,  228,  228,  228,  230,  230,  230,  235,
      244,  244,  244,  235,  246,  246,  246,  235,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       12,   12,   12,   12,   12,   12,   12,  233,  712,   12,
      233,  247,  247,  249,  249,   12,   12,   12,  712,   12,
      240,  272,  272,  240,  233,   12,  464,   12,  236,  236,
      236,  236,  236,  236,  236,  236,  239,  240,  248,  248,
      248,  464,  239,  274,  274,  239,  250,  250,  250,  252,
      252,  252,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   13,   13,   13,   13,  281,  281,
      239,  239,  253,  253,  253,  259,  239,  777,  259,  239,
      254,  254,  254,  255,  255,  255,  256,  256,  256,  257,
      257,  257,  258,  258,  258,  265,  283,  283,  265,  259,

      265,  259,  268,  268,  268,  268,  268,  268,  268,  268,
      265,  269,  269,  269,  744,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   14,   14,   14,
       14,  271,  271,  271,  273,  273,  273,  275,  275,  275,
      278,  278,  278,  280,  280,  280,  282,  282,  282,  284,
      284,  284,  287,  288,  289,  287,  288,  289,  290,  299,
      299,  290,  296,  296,  296,  298,  298,  298,  325,  290,
      287,  288,  289,  300,  300,  300,  290,  290,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       56,  291,  291,  291,  291,  291,  291,  291,  291,  292,

      301,  301,  292,  302,  302,  302,  293,  325,  532,  293,
      732,  314,  293,  304,  304,  304,  314,  292,  293,   56,
      305,  305,  305,  323,  293,  306,  306,  306,  307,  307,
      307,  308,  308,  308,  309,  309,  309,   56,   56,   56,
       56,   56,   56,   56,   56,   74,  293,  293,  310,  310,
      310,  311,  293,  532,  311,  293,  319,  319,  319,  319,
      328,  323,  326,  326,  326,  326,  329,  329,  329,  330,
      330,  330,  339,  534,   74,  311,  339,  311,  331,  331,
      331,  332,  332,  332,  333,  333,  333,  334,  334,  334,
      342,  452,   74,   74,   74,   74,   74,   74,   74,   74,

       80,  534,  342,   80,  335,  335,  335,  328,   80,  336,
      336,  336,  337,  337,  337,  376,  376,   80,  338,  338,
      338,  340,  354,  452,  340,  454,  354,  341,  341,  341,
      341,  344,  344,  344,  345,  345,  345,  346,  346,  346,
      347,  347,  347,  348,  348,  348,  349,  349,  349,  350,
      350,  350,  351,  351,  351,   80,   80,   80,   80,   80,
       80,   80,   80,   82,  341,  724,   82,  454,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,  355,   82,
       82,  355,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,

       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,  352,  352,  352,  568,   82,   82,
       82,   82,   82,   82,   82,   82,   92,  357,  570,   92,
      353,  353,  353,  718,   92,  356,  356,  356,  356,  357,
      359,  359,  359,   92,  360,  360,  360,  361,  361,  361,
      362,  362,  362,  568,   92,  363,  363,  363,  364,  364,
      364,  365,  365,  365,  368,  368,  368,  368,  368,  368,
      368,  368,  356,  366,  371,  570,  366,  371,  373,  373,
      373,   92,   92,   92,   92,   92,   92,   92,   92,   98,
      366,  371,   98,  369,   98,  367,  369,   98,  367,  369,

      375,  375,  375,  538,   98,  369,  367,  377,  377,  377,
      369,  538,  367,  615,  367,  378,  378,  379,  379,  379,
      384,  384,  384,  386,  386,  386,  387,  387,  388,  388,
      388,  389,  389,  369,  369,  390,  390,  390,  405,  369,
      444,  405,  369,  444,   98,   98,   98,   98,   98,   98,
       98,   98,  102,  424,  424,  102,  615,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  458,  102,  102,
      691,  102,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  102,  102,  102,

      102,  102,  102,  394,  394,  394,  458,  102,  102,  102,
      102,  102,  102,  102,  102,  112,  381,  392,  112,  715,
      112,  392,  381,  112,  393,  381,  426,  426,  393,  715,
      112,  395,  395,  395,  396,  396,  396,  397,  397,  397,
      398,  398,  398,  112,  399,  399,  399,  400,  400,  400,
      381,  381,  401,  401,  401,  571,  381,  533,  457,  381,
      402,  402,  402,  403,  403,  403,  406,  406,  406,  574,
      112,  112,  112,  112,  112,  112,  112,  112,  232,  457,
      574,  232,  571,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  533,  232,  232,  232,

      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  404,
      404,  404,  404,  232,  232,  232,  232,  232,  232,  232,
      232,  407,  407,  407,  408,  408,  408,  409,  409,  409,
      410,  410,  410,  411,  411,  411,  453,  404,  412,  412,
      412,  413,  414,  416,  413,  414,  416,  417,  622,  419,
      417,  418,  419,  420,  418,  622,  420,  418,  462,  413,
      414,  416,  462,  418,  535,  417,  469,  419,  453,  418,
      469,  420,  421,  421,  421,  423,  423,  423,  425,  425,

      425,  427,  427,  427,  429,  430,  465,  429,  430,  465,
      573,  418,  418,  470,  573,  429,  430,  418,  535,  470,
      418,  683,  429,  430,  431,  431,  431,  432,  432,  432,
      433,  433,  433,  434,  434,  434,  435,  435,  435,  436,
      436,  436,  437,  437,  437,  438,  438,  438,  439,  439,
      439,  440,  440,  440,  443,  443,  443,  443,  448,  448,
      448,  448,  455,  455,  455,  455,  456,  456,  456,  456,
      459,  459,  459,  460,  460,  460,  461,  461,  461,  466,
      466,  466,  443,  467,  467,  467,  468,  468,  468,  471,
      472,  472,  472,  473,  473,  473,  474,  474,  474,  475,

      476,  531,  475,  476,  471,  475,  477,  481,  481,  477,
      569,  475,  478,  478,  478,  677,  475,  476,  480,  480,
      480,  483,  483,  477,  482,  482,  482,  484,  484,  484,
      486,  674,  487,  486,  531,  487,  488,  488,  488,  475,
      475,  486,  569,  487,  576,  475,  576,  486,  475,  487,
      489,  489,  489,  490,  490,  490,  491,  491,  491,  492,
      492,  492,  493,  493,  493,  494,  494,  494,  495,  495,
      495,  496,  496,  496,  497,  497,  497,  498,  498,  498,
      499,  499,  499,  500,  500,  500,  501,  501,  501,  502,
      502,  502,  503,  503,  503,  504,  504,  504,  505,  505,

      505,  505,  506,  507,  507,  507,  556,  556,  506,  508,
      508,  508,  509,  509,  509,  505,  510,  510,  510,  511,
      511,  511,  512,  512,  512,  513,  513,  513,  514,  514,
      514,  515,  515,  515,  516,  516,  516,  517,  517,  517,
      518,  518,  518,  519,  519,  519,  520,  520,  520,  520,
      522,  522,  522,  522,  524,  522,  523,  523,  523,  523,
      524,  536,  540,  537,  541,  522,  537,  541,  542,  657,
      536,  540,  543,  543,  543,  657,  542,  544,  544,  544,
      545,  545,  545,  546,  546,  546,  547,  547,  547,  548,
      548,  548,  549,  549,  549,  550,  550,  550,  551,  551,

      551,  552,  552,  552,  553,  553,  553,  554,  554,  554,
      555,  555,  555,  557,  557,  557,  558,  558,  558,  559,
      559,  559,  561,  561,  572,  575,  577,  578,  579,  592,
      577,  580,  580,  580,  575,  593,  594,  579,  578,  581,
      581,  581,  582,  582,  582,  589,  595,  595,  589,  595,
      597,  596,  598,  599,  600,  598,  599,  601,  600,  795,
      602,  597,  572,  602,  603,  614,  604,  603,  601,  604,
      606,  617,  620,  606,  783,  594,  592,  607,  607,  607,
      607,  620,  593,  596,  611,  611,  611,  611,  618,  621,
      599,  618,  621,  624,  604,  673,  624,  672,  606,  795,

      629,  603,  610,  629,  614,  610,  613,  613,  613,  613,
      610,  626,  626,  626,  626,  783,  617,  629,  630,  630,
      630,  630,  630,  630,  630,  630,  631,  631,  631,  633,
      633,  633,  634,  634,  635,  635,  635,  636,  636,  637,
      637,  637,  639,  639,  639,  639,  641,  641,  641,  641,
      642,  642,  642,  642,  643,  647,  644,  610,  610,  610,
      610,  610,  610,  610,  610,  616,  616,  616,  616,  616,
      616,  616,  655,  656,  616,  665,  665,  665,  648,  660,
      656,  616,  616,  649,  616,  660,  654,  710,  650,  658,
      651,  666,  652,  659,  658,  668,  668,  643,  644,  653,

      659,  663,  640,  655,  663,  647,  647,  647,  664,  664,
      664,  664,  664,  664,  664,  664,  710,  616,  616,  616,
      616,  616,  616,  616,  616,  616,  616,  616,  616,  623,
      648,  638,  623,  649,  649,  649,  654,  623,  650,  650,
      651,  651,  651,  652,  652,  661,  623,  693,  661,  653,
      653,  653,  667,  667,  667,  669,  669,  669,  670,  670,
      679,  679,  661,  671,  671,  671,  675,  681,  681,  675,
      676,  676,  676,  678,  678,  678,  680,  680,  680,  682,
      682,  682,  692,  675,  623,  623,  623,  623,  623,  623,
      623,  623,  625,  693,  695,  625,  716,  625,  632,  716,

      625,  684,  684,  684,  685,  685,  685,  625,  686,  686,
      686,  687,  687,  687,  688,  688,  688,  689,  689,  689,
      690,  690,  690,  696,  692,  713,  697,  790,  711,  698,
      790,  699,  713,  700,  711,  714,  701,  720,  720,  702,
      703,  714,  628,  704,  695,  695,  695,  625,  625,  625,
      625,  625,  625,  625,  625,  645,  645,  645,  645,  645,
      645,  645,  722,  722,  645,  717,  717,  717,  719,  719,
      719,  645,  645,  705,  645,  696,  697,  697,  697,  698,
      698,  699,  699,  699,  700,  700,  701,  701,  701,  702,
      703,  703,  703,  704,  704,  704,  706,  793,  745,  707,

      789,  784,  708,  627,  793,  709,  784,  645,  645,  645,
      645,  645,  645,  645,  645,  645,  645,  645,  645,  646,
      646,  646,  646,  705,  705,  705,  721,  721,  721,  723,
      723,  723,  760,  789,  646,  725,  725,  725,  726,  726,
      726,  727,  727,  727,  745,  760,  706,  706,  706,  707,
      707,  707,  708,  708,  708,  709,  709,  709,  728,  728,
      728,  729,  729,  729,  730,  730,  730,  731,  731,  731,
      612,  646,  646,  646,  646,  646,  646,  646,  646,  646,
      646,  646,  646,  662,  747,  796,  662,  758,  662,  796,
      609,  662,  733,  733,  733,  733,  748,  758,  662,  734,

      734,  734,  735,  735,  735,  736,  736,  736,  737,  737,
      737,  738,  738,  738,  739,  739,  739,  740,  740,  740,
      741,  741,  741,  742,  742,  742,  743,  743,  743,  746,
      746,  746,  746,  749,  747,  747,  747,  750,  662,  662,
      662,  662,  662,  662,  662,  662,  748,  748,  748,  751,
      761,  608,  752,  799,  605,  753,  591,  590,  754,  588,
      761,  755,  587,  799,  756,  763,  763,  763,  757,  764,
      764,  764,  765,  765,  765,  766,  766,  766,  767,  767,
      767,  586,  585,  749,  749,  749,  584,  750,  750,  750,
      759,  759,  759,  759,  762,  762,  762,  762,  583,  751,

      751,  751,  752,  752,  752,  753,  753,  753,  754,  754,
      754,  755,  755,  755,  756,  756,  756,  757,  768,  768,
      768,  769,  769,  769,  770,  770,  770,  759,  771,  771,
      771,  762,  772,  772,  772,  773,  773,  773,  773,  774,
      774,  774,  775,  775,  775,  776,  776,  776,  778,  778,
      778,  778,  779,  779,  779,  779,  780,  792,  798,  781,
      567,  566,  782,  785,  785,  785,  786,  786,  786,  787,
      787,  787,  800,  800,  800,  800,  801,  801,  801,  801,
      802,  802,  802,  802,  803,  803,  803,  803,  804,  804,
      804,  804,  805,  805,  805,  805,  565,  564,  563,  562,

      792,  560,  530,  529,  798,  528,  780,  780,  780,  781,
      781,  781,  782,  782,  782,  527,  526,  802,  807,  807,
      807,  807,  807,  807,  807,  807,  808,  808,  808,  808,
      808,  808,  808,  808,  809,  809,  809,  809,  809,  809,
      809,  809,  810,  810,  810,  810,  810,  810,  810,  810,
      811,  811,  811,  811,  811,  811,  811,  811,  812,  812,
      812,  812,  812,  812,  812,  812,  813,  813,  813,  813,
      813,  813,  813,  813,  814,  814,  814,  814,  814,  814,
      814,  814,  815,  815,  525,  815,  815,  815,  815,  815,
      816,  816,  816,  816,  816,  816,  816,  817,  817,  817,

      817,  817,  817,  817,  818,  818,  521,  818,  818,  818,
      818,  818,  820,  820,  820,  820,  820,  821,  821,  485,
      821,  821,  821,  821,  821,  823,  823,  823,  823,  823,
      824,  824,  479,  824,  824,  824,  824,  824,  825,  451,
      825,  450,  449,  825,  826,  826,  826,  826,  826,  827,
      827,  447,  827,  827,  827,  827,  827,  828,  446,  445,
      828,  828,  828,  828,  828,  829,  442,  829,  441,  829,
      829,  830,  830,  830,  830,  830,  831,  831,  831,  831,
      831,  832,  832,  832,  832,  832,  833,  833,  833,  833,
      833,  834,  428,  834,  422,  391,  834,  835,  835,  835,

      835,  835,  835,  835,  836,  385,  836,  383,  836,  836,
      837,  837,  837,  837,  837,  838,  838,  838,  838,  838,
      838,  838,  838,  839,  839,  839,  839,  839,  382,  380,
      374,  372,  322,  321,  320,  318,  317,  316,  313,  312,
      303,  297,  295,  294,  285,  279,  277,  276,  270,  267,
      263,  251,  245,  242,  241,  238,  237,  234,  231,  225,
      223,  222,  216,  214,  212,  198,  192,  190,  189,  183,
      180,  174,  165,  159,  157,  156,  150,  147,  134,  133,
      132,  131,  130,  129,  128,  127,  125,  123,  122,  121,
      120,  110,  104,   97,   90,   84,   72,   66,   54,   48,

       41,   35,   34,   32,   31,   29,   28,   27,   25,   24,
       23,   22,   15,  806,  806,  806,  806,  806,  806,  806,
      806,  806,  806,  806,  806,  806,  806,  806,  806,  806,
      806,  806,  806,  806,  806,  806,  806,  806,  806,  806,
      806,  806,  806,  806,  806,  806,  806,  806,  806,  806,
      806,  806,  806,  806,  806,  806,  806,  806,  806,  806,
      806,  806,  806,  806,  806,  806,  806,  806,  806,  806,
      806,  806,  806,  806,  806,  806,  806,  806
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[38] =
    {   0,
1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 
    0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0,     };

extern int hlexc_flex_debug;
int hlexc_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up hlexctext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
(yy_lp) = (yy_full_lp); /* restore orig. accepting pos. */ \
(yy_state_ptr) = (yy_full_state); /* restore orig. state */ \
yy_current_state = *(yy_state_ptr); /* restore curr. state */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *hlexctext;
#line 1 "lexc-lexer.ll"
#line 4 "lexc-lexer.ll"
#if HAVE_CONFIG_H
#  include <config.h>
#endif
#include "lexc-parser.h"
#include "flex-utils.h"
#include "string-munging.h"
#include "lexcio.h"

#include <assert.h>

extern void hlexcerror(const char *text);

/* c.f. Unicode Standard 5.1 D92 Table 3-7 */
/* non US-ASCII */
/* any UTF-8 */
/* Escaped */
/* any ASCII */
/* special meaning in lexc */
/* non-restricted ASCII */
/* special meaning in xre */
/* non-restricted ASCII in XRE */
/* RegExp. stuff */
/* String entry part:
 * - any unrestricted ASCII-7,
 * - any high unicode codepoint (past U+007F) UTF-8-encoded
 * - any %-escaped UTF-8
 */
/* Lexicon name part */
/* White space */

#line 1512 "lexc-lexer.cc"

#define INITIAL 0
#define METADATA 1
#define ALPHABET 2
#define MULTICHARS 3
#define DEFINITIONS 4
#define LEXICONS 5
#define ENDED 6

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int hlexclex_destroy (void );

int hlexcget_debug (void );

void hlexcset_debug (int debug_flag  );

YY_EXTRA_TYPE hlexcget_extra (void );

void hlexcset_extra (YY_EXTRA_TYPE user_defined  );

FILE *hlexcget_in (void );

void hlexcset_in  (FILE * in_str  );

FILE *hlexcget_out (void );

void hlexcset_out  (FILE * out_str  );

int hlexcget_leng (void );

char *hlexcget_text (void );

int hlexcget_lineno (void );

void hlexcset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int hlexcwrap (void );
#else
extern int hlexcwrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( hlexctext, hlexcleng, 1, hlexcout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( hlexcin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( hlexcin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, hlexcin))==0 && ferror(hlexcin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(hlexcin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int hlexclex (void);

#define YY_DECL int hlexclex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after hlexctext and hlexcleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( hlexcleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(hlexctext[hlexcleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 71 "lexc-lexer.ll"



#line 1712 "lexc-lexer.cc"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)hlexcalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in hlexclex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! hlexcin )
			hlexcin = stdin;

		if ( ! hlexcout )
			hlexcout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			hlexcensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				hlexc_create_buffer(hlexcin,YY_BUF_SIZE );
		}

		hlexc_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of hlexctext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 807 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_current_state != 806 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     (yy_looking_for_trail_begin) )
					{
					if ( yy_act == (yy_looking_for_trail_begin) )
						{
						(yy_looking_for_trail_begin) = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					(yy_looking_for_trail_begin) = yy_act & ~YY_TRAILING_MASK;
					(yy_looking_for_trail_begin) |= YY_TRAILING_HEAD_MASK;
					}
				else
					{
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					break;
					}
				++(yy_lp);
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < hlexcleng; ++yyl )
				if ( hlexctext[yyl] == '\n' )
					   
    hlexclineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 74 "lexc-lexer.ll"
{
	BEGIN METADATA;
	token_update_positions(hlexctext);
	return METADATA_START;
}
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 80 "lexc-lexer.ll"
{
	BEGIN ALPHABET;
	token_update_positions(hlexctext);
	return ALPHABET_START;
}
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 86 "lexc-lexer.ll"
{
	BEGIN MULTICHARS;
	token_update_positions(hlexctext);
	return MULTICHARS_START;
}
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 92 "lexc-lexer.ll"
{
	BEGIN DEFINITIONS;
	token_update_positions(hlexctext);
	return DEFINITIONS_START;
}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 98 "lexc-lexer.ll"
{
	BEGIN LEXICONS;
	token_update_positions(hlexctext);
	char* lexicon_start;
	lexicon_start = strstrip(hlexctext);
	hlexclval.name = strdup_nonconst_part(lexicon_start, "LEXICON",
										  NULL, true);
	free(lexicon_start);
	return LEXICON_START;
}
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 109 "lexc-lexer.ll"
{
	token_update_positions(hlexctext);
	return END_START;
}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 114 "lexc-lexer.ll"
{
	token_update_positions(hlexctext);
}
	YY_BREAK
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 118 "lexc-lexer.ll"
{
	token_update_positions(hlexctext);
}
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 123 "lexc-lexer.ll"
{
	token_update_positions(hlexctext);
	hlexclval.name = strstrip(hlexctext);
	return METADATA_FIELDNAME;
}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 129 "lexc-lexer.ll"
{
	token_update_positions(hlexctext);
	return ':';
}
	YY_BREAK
case 11:
/* rule 11 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up hlexctext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up hlexctext again */
YY_RULE_SETUP
#line 134 "lexc-lexer.ll"
{
	token_update_positions(hlexctext);
	hlexclval.name = strstrip(hlexctext);
	return METADATA_VALUE;
}
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 140 "lexc-lexer.ll"
{ token_update_positions(hlexctext); }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 142 "lexc-lexer.ll"
{
	token_update_positions(hlexctext);
	hlexclval.name = strip_percents(hlexctext, false);
	return ALPHABET_SYMBOL;
}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 148 "lexc-lexer.ll"
{ token_update_positions(hlexctext); }
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 150 "lexc-lexer.ll"
{ token_update_positions(hlexctext); }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 152 "lexc-lexer.ll"
{
	token_update_positions(hlexctext);
	hlexclval.name = strip_percents(hlexctext, false);
	return MULTICHAR_SYMBOL;
}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 158 "lexc-lexer.ll"
{ token_update_positions(hlexctext); }
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 160 "lexc-lexer.ll"
{ token_update_positions(hlexctext); }
	YY_BREAK
case 19:
*yy_cp = (yy_hold_char); /* undo effects of setting up hlexctext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up hlexctext again */
YY_RULE_SETUP
#line 162 "lexc-lexer.ll"
{
	token_update_positions(hlexctext);
	hlexclval.name = strstrip(hlexctext);
	return DEFINITION_NAME;
}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 168 "lexc-lexer.ll"
{
	token_update_positions(hlexctext);
	hlexclval.name = strdup_nonconst_part(hlexctext, "=", ";", false);
	return DEFINITION_EXPRESSION;
}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 174 "lexc-lexer.ll"
{ token_update_positions(hlexctext); }
	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
#line 176 "lexc-lexer.ll"
{ token_update_positions(hlexctext); }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 178 "lexc-lexer.ll"
{
	token_update_positions(hlexctext);
	char* lexicon_start;
	lexicon_start = strstrip(hlexctext);
	hlexclval.name = strdup_nonconst_part(lexicon_start, "LEXICON", 0, true);
	free(lexicon_start);
	return LEXICON_START;
}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 187 "lexc-lexer.ll"
{
	token_update_positions(hlexctext);
	hlexclval.name = strip_percents(hlexctext, false);
	return ULSTRING;
}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 193 "lexc-lexer.ll"
{
	token_update_positions(hlexctext);
	hlexclval.name = strdup_nonconst_part(hlexctext, "<", ">", false);
	return XEROX_REGEXP;
}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 199 "lexc-lexer.ll"
{
	token_update_positions(hlexctext);
	hlexclval.name = strdup(hlexctext);
	return LEXICON_NAME;
}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 205 "lexc-lexer.ll"
{
	token_update_positions(hlexctext);
	hlexclval.name = strdup(hlexctext);
	return ENTRY_GLOSS;
}
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
#line 211 "lexc-lexer.ll"
{
	BEGIN ENDED;
	token_update_positions(hlexctext);
	return END_START;
}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 217 "lexc-lexer.ll"
{
	token_update_positions(hlexctext);
	return hlexctext[0];
}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 222 "lexc-lexer.ll"
{
	token_update_positions(hlexctext);
	return hlexctext[0];
}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 227 "lexc-lexer.ll"
{
	token_update_positions(hlexctext);

}
	YY_BREAK
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
#line 231 "lexc-lexer.ll"
{
	token_update_positions(hlexctext);

}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 236 "lexc-lexer.ll"
{ 
	token_update_positions(hlexctext);

}
	YY_BREAK
case 34:
/* rule 34 can match eol */
YY_RULE_SETUP
#line 240 "lexc-lexer.ll"
{
	token_update_positions(hlexctext);
}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 244 "lexc-lexer.ll"
{
	token_update_positions(hlexctext);
	hlexcerror(_("Illegal 8-bit sequence (cannot form valid UTF-8)"));
	return ERROR;
}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 250 "lexc-lexer.ll"
{
	token_update_positions(hlexctext);
	hlexcerror(_("Syntax error in lexer (no valid token found at the point)"));
	return ERROR;
}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 256 "lexc-lexer.ll"
ECHO;
	YY_BREAK
#line 2152 "lexc-lexer.cc"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(METADATA):
			case YY_STATE_EOF(ALPHABET):
			case YY_STATE_EOF(MULTICHARS):
			case YY_STATE_EOF(DEFINITIONS):
			case YY_STATE_EOF(LEXICONS):
			case YY_STATE_EOF(ENDED):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed hlexcin at a new source and called
			 * hlexclex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = hlexcin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( hlexcwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * hlexctext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of hlexclex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			hlexcrestart(hlexcin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) hlexcrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 807 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    
	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 807 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 806);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up hlexctext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --hlexclineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					hlexcrestart(hlexcin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( hlexcwrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve hlexctext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');
	if ( YY_CURRENT_BUFFER_LVALUE->yy_at_bol )
		   
    hlexclineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void hlexcrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        hlexcensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            hlexc_create_buffer(hlexcin,YY_BUF_SIZE );
	}

	hlexc_init_buffer(YY_CURRENT_BUFFER,input_file );
	hlexc_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void hlexc_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		hlexcpop_buffer_state();
	 *		hlexcpush_buffer_state(new_buffer);
     */
	hlexcensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	hlexc_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (hlexcwrap()) processing, but the only time this flag
	 * is looked at is after hlexcwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void hlexc_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	hlexcin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE hlexc_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) hlexcalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in hlexc_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) hlexcalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in hlexc_create_buffer()" );

	b->yy_is_our_buffer = 1;

	hlexc_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with hlexc_create_buffer()
 * 
 */
    void hlexc_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		hlexcfree((void *) b->yy_ch_buf  );

	hlexcfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a hlexcrestart() or at EOF.
 */
    static void hlexc_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	hlexc_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then hlexc_init_buffer was _probably_
     * called from hlexcrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void hlexc_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		hlexc_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void hlexcpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	hlexcensure_buffer_stack();

	/* This block is copied from hlexc_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from hlexc_switch_to_buffer. */
	hlexc_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void hlexcpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	hlexc_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		hlexc_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void hlexcensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)hlexcalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in hlexcensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)hlexcrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in hlexcensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE hlexc_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) hlexcalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in hlexc_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	hlexc_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to hlexclex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       hlexc_scan_bytes() instead.
 */
YY_BUFFER_STATE hlexc_scan_string (yyconst char * yystr )
{
    
	return hlexc_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to hlexclex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE hlexc_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) hlexcalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in hlexc_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = hlexc_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in hlexc_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up hlexctext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		hlexctext[hlexcleng] = (yy_hold_char); \
		(yy_c_buf_p) = hlexctext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		hlexcleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int hlexcget_lineno  (void)
{
        
    return hlexclineno;
}

/** Get the input stream.
 * 
 */
FILE *hlexcget_in  (void)
{
        return hlexcin;
}

/** Get the output stream.
 * 
 */
FILE *hlexcget_out  (void)
{
        return hlexcout;
}

/** Get the length of the current token.
 * 
 */
int hlexcget_leng  (void)
{
        return hlexcleng;
}

/** Get the current token.
 * 
 */

char *hlexcget_text  (void)
{
        return hlexctext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void hlexcset_lineno (int  line_number )
{
    
    hlexclineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see hlexc_switch_to_buffer
 */
void hlexcset_in (FILE *  in_str )
{
        hlexcin = in_str ;
}

void hlexcset_out (FILE *  out_str )
{
        hlexcout = out_str ;
}

int hlexcget_debug  (void)
{
        return hlexc_flex_debug;
}

void hlexcset_debug (int  bdebug )
{
        hlexc_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from hlexclex_destroy(), so don't allocate here.
     */

    /* We do not touch hlexclineno unless the option is enabled. */
    hlexclineno =  1;
    
    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    hlexcin = stdin;
    hlexcout = stdout;
#else
    hlexcin = (FILE *) 0;
    hlexcout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * hlexclex_init()
     */
    return 0;
}

/* hlexclex_destroy is for both reentrant and non-reentrant scanners. */
int hlexclex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		hlexc_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		hlexcpop_buffer_state();
	}

	/* Destroy the stack itself. */
	hlexcfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    hlexcfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * hlexclex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *hlexcalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *hlexcrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void hlexcfree (void * ptr )
{
	free( (char *) ptr );	/* see hlexcrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 256 "lexc-lexer.ll"



